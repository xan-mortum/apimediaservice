// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewApimediaserviceAPI creates a new Apimediaservice instance
func NewApimediaserviceAPI(spec *loads.Document) *ApimediaserviceAPI {
	return &ApimediaserviceAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		customConsumers:       make(map[string]runtime.Consumer),
		customProducers:       make(map[string]runtime.Producer),
		PreServerShutdown:     func() {},
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		FilesHandler: FilesHandlerFunc(func(params FilesParams) middleware.Responder {
			return middleware.NotImplemented("operation operations.Files has not yet been implemented")
		}),
		ResizeHandler: ResizeHandlerFunc(func(params ResizeParams) middleware.Responder {
			return middleware.NotImplemented("operation operations.Resize has not yet been implemented")
		}),
		ResizeExistsHandler: ResizeExistsHandlerFunc(func(params ResizeExistsParams) middleware.Responder {
			return middleware.NotImplemented("operation operations.ResizeExists has not yet been implemented")
		}),
		ResultHandler: ResultHandlerFunc(func(params ResultParams) middleware.Responder {
			return middleware.NotImplemented("operation operations.Result has not yet been implemented")
		}),
		TokenHandler: TokenHandlerFunc(func(params TokenParams) middleware.Responder {
			return middleware.NotImplemented("operation operations.Token has not yet been implemented")
		}),
		UploadHandler: UploadHandlerFunc(func(params UploadParams) middleware.Responder {
			return middleware.NotImplemented("operation operations.Upload has not yet been implemented")
		}),
		V2filesHandler: V2filesHandlerFunc(func(params V2filesParams) middleware.Responder {
			return middleware.NotImplemented("operation operations.V2files has not yet been implemented")
		}),
		V2resizeHandler: V2resizeHandlerFunc(func(params V2resizeParams) middleware.Responder {
			return middleware.NotImplemented("operation operations.V2resize has not yet been implemented")
		}),
	}
}

/*ApimediaserviceAPI the apimediaservice API */
type ApimediaserviceAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator
	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// FilesHandler sets the operation handler for the files operation
	FilesHandler FilesHandler
	// ResizeHandler sets the operation handler for the resize operation
	ResizeHandler ResizeHandler
	// ResizeExistsHandler sets the operation handler for the resize exists operation
	ResizeExistsHandler ResizeExistsHandler
	// ResultHandler sets the operation handler for the result operation
	ResultHandler ResultHandler
	// TokenHandler sets the operation handler for the token operation
	TokenHandler TokenHandler
	// UploadHandler sets the operation handler for the upload operation
	UploadHandler UploadHandler
	// V2filesHandler sets the operation handler for the v2files operation
	V2filesHandler V2filesHandler
	// V2resizeHandler sets the operation handler for the v2resize operation
	V2resizeHandler V2resizeHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ApimediaserviceAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ApimediaserviceAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ApimediaserviceAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ApimediaserviceAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ApimediaserviceAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ApimediaserviceAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ApimediaserviceAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ApimediaserviceAPI
func (o *ApimediaserviceAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.FilesHandler == nil {
		unregistered = append(unregistered, "Operations.FilesHandler")
	}

	if o.ResizeHandler == nil {
		unregistered = append(unregistered, "Operations.ResizeHandler")
	}

	if o.ResizeExistsHandler == nil {
		unregistered = append(unregistered, "Operations.ResizeExistsHandler")
	}

	if o.ResultHandler == nil {
		unregistered = append(unregistered, "Operations.ResultHandler")
	}

	if o.TokenHandler == nil {
		unregistered = append(unregistered, "Operations.TokenHandler")
	}

	if o.UploadHandler == nil {
		unregistered = append(unregistered, "Operations.UploadHandler")
	}

	if o.V2filesHandler == nil {
		unregistered = append(unregistered, "Operations.V2filesHandler")
	}

	if o.V2resizeHandler == nil {
		unregistered = append(unregistered, "Operations.V2resizeHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ApimediaserviceAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ApimediaserviceAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *ApimediaserviceAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ApimediaserviceAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ApimediaserviceAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ApimediaserviceAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the apimediaservice API
func (o *ApimediaserviceAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ApimediaserviceAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/files"] = NewFiles(o.context, o.FilesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/resize"] = NewResize(o.context, o.ResizeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/resize_exists"] = NewResizeExists(o.context, o.ResizeExistsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/result"] = NewResult(o.context, o.ResultHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/token"] = NewToken(o.context, o.TokenHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/upload"] = NewUpload(o.context, o.UploadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/files"] = NewV2files(o.context, o.V2filesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/resize"] = NewV2resize(o.context, o.V2resizeHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ApimediaserviceAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ApimediaserviceAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ApimediaserviceAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ApimediaserviceAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
